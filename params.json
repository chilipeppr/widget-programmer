{"name":"Widget-programmer","tagline":"A widget that enables you to program your Arduino, AVR, or Bossac-based board from Serial Port JSON Server.","body":"# com-chilipeppr-widget-programmer\r\nThis widget lets you program your Arduino/Atmel from within ChiliPeppr using SPJS's new programfromurl method. SPJS now comes with avrdude and bossac just like the Arduino IDE. This means SPJS can handle programming your firmware directly from the browser.\r\n\r\n![alt text](screenshot.png \"Screenshot\")\r\n\r\n## ChiliPeppr Widget / Programmer\r\n\r\nAll ChiliPeppr widgets/elements are defined using cpdefine() which is a method\r\nthat mimics require.js. Each defined object must have a unique ID so it does\r\nnot conflict with other ChiliPeppr widgets.\r\n\r\n| Item                  | Value           |\r\n| -------------         | ------------- | \r\n| ID                    | com-chilipeppr-widget-programmer |\r\n| Name                  | Widget / Programmer |\r\n| Description           | This widget lets you program your Arduino/Atmel from within ChiliPeppr using SPJS's new programfromurl method. SPJS now comes with avrdude and bossac just like the Arduino IDE. This means SPJS can handle programming your firmware directly from the browser. |\r\n| chilipeppr.load() URL | http://raw.githubusercontent.com/chilipeppr/widget-programmer/master/auto-generated-widget.html |\r\n| Edit URL              | http://ide.c9.io/chilipeppr/widget-programmer |\r\n| Github URL            | http://github.com/chilipeppr/widget-programmer |\r\n| Test URL              | https://preview.c9users.io/chilipeppr/widget-programmer/widget.html |\r\n\r\n## Example Code for chilipeppr.load() Statement\r\n\r\nYou can use the code below as a starting point for instantiating this widget \r\ninside a workspace or from another widget. The key is that you need to load \r\nyour widget inlined into a div so the DOM can parse your HTML, CSS, and \r\nJavascript. Then you use cprequire() to find your widget's Javascript and get \r\nback the instance of it.\r\n\r\n```javascript\r\n// Inject new div to contain widget or use an existing div with an ID\r\n$(\"body\").append('<' + 'div id=\"myDivWidgetProgrammer\"><' + '/div>');\r\n\r\nchilipeppr.load(\r\n  \"#myDivWidgetProgrammer\",\r\n  \"http://raw.githubusercontent.com/chilipeppr/widget-programmer/master/auto-generated-widget.html\",\r\n  function() {\r\n    // Callback after widget loaded into #myDivWidgetProgrammer\r\n    // Now use require.js to get reference to instantiated widget\r\n    cprequire(\r\n      [\"inline:com-chilipeppr-widget-programmer\"], // the id you gave your widget\r\n      function(myObjWidgetProgrammer) {\r\n        // Callback that is passed reference to the newly loaded widget\r\n        console.log(\"Widget / Programmer just got loaded.\", myObjWidgetProgrammer);\r\n        myObjWidgetProgrammer.init();\r\n      }\r\n    );\r\n  }\r\n);\r\n\r\n```\r\n\r\n## Publish\r\n\r\nThis widget/element publishes the following signals. These signals are owned by this widget/element and are published to all objects inside the ChiliPeppr environment that listen to them via the \r\nchilipeppr.subscribe(signal, callback) method. \r\nTo better understand how ChiliPeppr's subscribe() method works see amplify.js's documentation at http://amplifyjs.com/api/pubsub/\r\n\r\n  <table id=\"com-chilipeppr-elem-pubsubviewer-pub\" class=\"table table-bordered table-striped\">\r\n      <thead>\r\n          <tr>\r\n              <th style=\"\">Signal</th>\r\n              <th style=\"\">Description</th>\r\n          </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr><td colspan=\"2\">(No signals defined in this widget/element)</td></tr>    \r\n      </tbody>\r\n  </table>\r\n\r\n## Subscribe\r\n\r\nThis widget/element subscribes to the following signals. These signals are owned by this widget/element. Other objects inside the ChiliPeppr environment can publish to these signals via the chilipeppr.publish(signal, data) method. \r\nTo better understand how ChiliPeppr's publish() method works see amplify.js's documentation at http://amplifyjs.com/api/pubsub/\r\n\r\n  <table id=\"com-chilipeppr-elem-pubsubviewer-sub\" class=\"table table-bordered table-striped\">\r\n      <thead>\r\n          <tr>\r\n              <th style=\"\">Signal</th>\r\n              <th style=\"\">Description</th>\r\n          </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr><td colspan=\"2\">(No signals defined in this widget/element)</td></tr>    \r\n      </tbody>\r\n  </table>\r\n\r\n## Foreign Publish\r\n\r\nThis widget/element publishes to the following signals that are owned by other objects. \r\nTo better understand how ChiliPeppr's subscribe() method works see amplify.js's documentation at http://amplifyjs.com/api/pubsub/\r\n\r\n  <table id=\"com-chilipeppr-elem-pubsubviewer-foreignpub\" class=\"table table-bordered table-striped\">\r\n      <thead>\r\n          <tr>\r\n              <th style=\"\">Signal</th>\r\n              <th style=\"\">Description</th>\r\n          </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr valign=\"top\"><td>/com-chilipeppr-widget-programmer/com-chilipeppr-widget-serialport/send</td><td>We send to the serial port certain commands like the initial configuration commands for the TinyG to be in the correct mode and to get initial statuses like planner buffers and XYZ coords. We also send the Emergency Stop and Resume of ! and ~</td></tr><tr valign=\"top\"><td>/com-chilipeppr-widget-programmer/com-chilipeppr-elem-flashmsg/flashmsg</td><td>To flash messages</td></tr>    \r\n      </tbody>\r\n  </table>\r\n\r\n## Foreign Subscribe\r\n\r\nThis widget/element publishes to the following signals that are owned by other objects.\r\nTo better understand how ChiliPeppr's publish() method works see amplify.js's documentation at http://amplifyjs.com/api/pubsub/\r\n\r\n  <table id=\"com-chilipeppr-elem-pubsubviewer-foreignsub\" class=\"table table-bordered table-striped\">\r\n      <thead>\r\n          <tr>\r\n              <th style=\"\">Signal</th>\r\n              <th style=\"\">Description</th>\r\n          </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr valign=\"top\"><td>/com-chilipeppr-widget-programmer/com-chilipeppr-widget-serialport/recvline</td><td>When we get a dataline from serialport, process it and fire off generic CNC controller signals to the /com-chilipeppr-interface-cnccontroller channel.</td></tr>    \r\n      </tbody>\r\n  </table>\r\n\r\n## Methods / Properties\r\n\r\nThe table below shows, in order, the methods and properties inside the widget/element.\r\n\r\n  <table id=\"com-chilipeppr-elem-methodsprops\" class=\"table table-bordered table-striped\">\r\n      <thead>\r\n          <tr>\r\n              <th style=\"\">Method / Property</th>\r\n              <th>Type</th>\r\n              <th style=\"\">Description</th>\r\n          </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr valign=\"top\"><td>id</td><td>string</td><td>\"com-chilipeppr-widget-programmer\"</td></tr><tr valign=\"top\"><td>url</td><td>string</td><td>\"http://raw.githubusercontent.com/chilipeppr/widget-programmer/master/auto-generated-widget.html\"</td></tr><tr valign=\"top\"><td>fiddleurl</td><td>string</td><td>\"http://ide.c9.io/chilipeppr/widget-programmer\"</td></tr><tr valign=\"top\"><td>githuburl</td><td>string</td><td>\"http://github.com/chilipeppr/widget-programmer\"</td></tr><tr valign=\"top\"><td>testurl</td><td>string</td><td>\"http://widget-programmer-chilipeppr.c9users.io/widget.html\"</td></tr><tr valign=\"top\"><td>name</td><td>string</td><td>\"Widget / Programmer\"</td></tr><tr valign=\"top\"><td>desc</td><td>string</td><td>\"This widget lets you program your Arduino/Atmel from within ChiliPeppr using SPJS's new programfromurl method. SPJS now comes with avrdude and bossac just like the Arduino IDE. This means SPJS can handle programming your firmware directly from the browser.\"</td></tr><tr valign=\"top\"><td>publish</td><td>object</td><td>Please see docs above.</td></tr><tr valign=\"top\"><td>subscribe</td><td>object</td><td>Please see docs above.</td></tr><tr valign=\"top\"><td>foreignPublish</td><td>object</td><td>Please see docs above.</td></tr><tr valign=\"top\"><td>foreignSubscribe</td><td>object</td><td>Please see docs above.</td></tr><tr valign=\"top\"><td>isInitted</td><td>boolean</td><td></td></tr><tr valign=\"top\"><td>init</td><td>function</td><td>function () </td></tr><tr valign=\"top\"><td>setupProgramBtn</td><td>function</td><td>function () </td></tr><tr valign=\"top\"><td>onProgram</td><td>function</td><td>function () </td></tr><tr valign=\"top\"><td>downloadDone</td><td>boolean</td><td></td></tr><tr valign=\"top\"><td>progressDone</td><td>boolean</td><td></td></tr><tr valign=\"top\"><td>onWsRecv</td><td>function</td><td>function (msg) </td></tr><tr valign=\"top\"><td>onProgramDone</td><td>function</td><td>function () </td></tr><tr valign=\"top\"><td>portSelected</td><td>object</td><td></td></tr><tr valign=\"top\"><td>isSetupPortListInitted</td><td>boolean</td><td></td></tr><tr valign=\"top\"><td>setupPortList</td><td>function</td><td>function () </td></tr><tr valign=\"top\"><td>getPortListCallback</td><td>function</td><td>function (data) </td></tr><tr valign=\"top\"><td>onPortListClick</td><td>function</td><td>function (evt) </td></tr><tr valign=\"top\"><td>deviceSelected</td><td>object</td><td></td></tr><tr valign=\"top\"><td>setupDeviceList</td><td>function</td><td>function () </td></tr><tr valign=\"top\"><td>onClickDeviceType</td><td>function</td><td>function (evt) </td></tr><tr valign=\"top\"><td>onDeviceType</td><td>function</td><td>function (devicekey) </td></tr><tr valign=\"top\"><td>setupUrl</td><td>function</td><td>function () </td></tr><tr valign=\"top\"><td>setUrl</td><td>function</td><td>function (url) </td></tr><tr valign=\"top\"><td>shortcutsClear</td><td>function</td><td>function () </td></tr><tr valign=\"top\"><td>isVersionWarningInitted</td><td>boolean</td><td></td></tr><tr valign=\"top\"><td>versionWarning</td><td>function</td><td>function () </td></tr><tr valign=\"top\"><td>versionWarningCallback</td><td>function</td><td>function (spjsVersion) </td></tr><tr valign=\"top\"><td>options</td><td>object</td><td></td></tr><tr valign=\"top\"><td>show</td><td>function</td><td>function (options) </td></tr><tr valign=\"top\"><td>hide</td><td>function</td><td>function () </td></tr><tr valign=\"top\"><td>forkSetup</td><td>function</td><td>function () </td></tr><tr valign=\"top\"><td>devices</td><td>object</td><td></td></tr>\r\n      </tbody>\r\n  </table>\r\n\r\n\r\n## About ChiliPeppr\r\n\r\n[ChiliPeppr](http://chilipeppr.com) is a hardware fiddle, meaning it is a \r\nwebsite that lets you easily\r\ncreate a workspace to fiddle with your hardware from software. ChiliPeppr provides\r\na [Serial Port JSON Server](https://github.com/johnlauer/serial-port-json-server) \r\nthat you run locally on your computer, or remotely on another computer, to connect to \r\nthe serial port of your hardware like an Arduino or other microcontroller.\r\n\r\nYou then create a workspace at ChiliPeppr.com that connects to your hardware \r\nby starting from scratch or forking somebody else's\r\nworkspace that is close to what you are after. Then you write widgets in\r\nJavascript that interact with your hardware by forking the base template \r\nwidget or forking another widget that\r\nis similar to what you are trying to build.\r\n\r\nChiliPeppr is massively capable such that the workspaces for \r\n[TinyG](http://chilipeppr.com/tinyg) and [Grbl](http://chilipeppr.com/grbl) CNC \r\ncontrollers have become full-fledged CNC machine management software used by\r\ntens of thousands.\r\n\r\nChiliPeppr has inspired many people in the hardware/software world to use the\r\nbrowser and Javascript as the foundation for interacting with hardware. The\r\nArduino team in Italy caught wind of ChiliPeppr and now\r\nChiliPeppr's Serial Port JSON Server is the basis for the \r\n[Arduino's new web IDE](https://create.arduino.cc/). If the Arduino team is excited about building on top\r\nof ChiliPeppr, what\r\nwill you build on top of it?\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}